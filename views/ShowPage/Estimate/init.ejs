<script>
    // Global variables
    let _accessProfile= <%- JSON.stringify(accessProfile)%>;
    let _user= <%- JSON.stringify(user)%>;
    let _apName= <%- JSON.stringify(apName)%>;
    let _sortedVersionKeys= <%- JSON.stringify(sortedVersionKeys)%>;
    let _comparisonVersion= <%- JSON.stringify(comparisonVersion)%>;

    populateAccessProfileModal(false, false, true)

    let _version=_args.version;
    let _originalVersion=_args.version
    let _displaySettings=_accessProfile.displaySettings[_apName][_version]||{}
    let _extraColumns=_args.extraColumns
    let _fringes=_args.fringes
    let _mandayRates=_args.mandayRates
    let _validators=[
        {
            fields: ['Set Code'],
            isInvalid: function (args, field) {
                this.validationHeader=`Invalid Set Code: ${args.item[field]}!`
                this.validationMessage='A set with this code already exists.'
                return dataView.getItems().find(i => i[field]==args.item[field]&&i.id!=args.item.id)&&args.item[field]
            }
        },
    ];
    let _totals={ Current: 'sum', Variance: 'sum' };
    let _departmentTotals={}

    let grid;
    let dataView;

    // Load the grid 
    async function onLoad() {
        // Create options
        let options=await initializeOptions();

        // Create grid columns
        let columns=await initializeColumns();

        // Create grid data
        let data=<%- JSON.stringify(data)%>;
        data=await applyEditDataFilter(data, columns)

        // Create data grid
        await createSlickGrid(data, columns, options);

        // Apply cell styles
        applyCellStyles(_cellCssStyles)

        // Click listener to toggle star column cells on click
        grid.onDblClick.subscribe(function (e, args) {
            let cols=grid.getColumns()
            let starCol=cols.indexOf(cols.find(c => c.name=='*'))

            let dv=grid.getData()
            let oldItem=dv.getItemByIdx(args.row)
            let newItem=JSON.parse(JSON.stringify(oldItem))

            if (args.cell==starCol) {
                oldItem['*']=='*'? newItem['*']=undefined:newItem['*']='*'
                updateItemCustom(args.row, args.cell, newItem, oldItem)
            }
        })

        // Recalculate after paste
        grid.recalculate=async function (item, editedfields=false) {
            let cols=grid.getColumns()
            let updateMath=false
            if (editedfields) {
                for (d of _args.departments) {
                    let mathCols=['Man Days', 'Labor', 'Materials', 'Rentals'].map(x => `${d} ${x}`)
                    for (field of editedfields) {
                        if (mathCols.includes(field)) {
                            updateMath=true
                            if (field==`${d} Man Days`||field==`${d} Labor`) {
                                let args={ item: item }
                                args.cell=cols.indexOf(cols.find(c => c.field==field))
                                console.log(`balancing ${field}`)
                                await balanceLaborManDays(args)
                            }
                        }
                    }
                }
            }

            if (updateMath) {
                await updateEstimateMathColumns()
                await updateTotalsRow()
            }

            updateTotalsRow()
        }

        // Update math columns automatically when a department cell is edited
        grid.onCellChange.subscribe(function (e, args) {
            // Uncomment/comment to toggle automatic math column update on cell edit (slow when pasting large amounts)
            if (isDepartmentKey(grid.getColumns()[args.cell].field)) {
                balanceLaborManDays(args);
                updateEstimateMathColumns();
            }

            // Run validators on cell edit 
            runValidators(_validators, args);

            // Handle * column changes
            // setInactive(!args.item['*'], args.item)

            updateTotalsRow();
        });

        // Apply saved display settings
        applyDisplaySettings(_displaySettings)

        // Set estimate status to saved
        await updateSaveStatus(true);

        // if estimate versions exist, populate this version's manday rates and fringes
        if (_sortedVersionKeys.includes(_args.version)) {
            // Populate Manday Rates
            await populateMandayRates()

            // Populate Fringes
            await populateFringes()

            // Compute Math column values
            await updateEstimateMathColumns()

            // If manday rates are not set, open the manday rate modal to set them
            if (!Object.keys(_mandayRates)[0]) {
                toggleManDayRatesModal(true)
            }
        }

        // Calcualte totals for totals footer row
        await updateTotalsRow()

        // Add class to week ending display so that it stands out as different (this one applies only to the estimate version)
        await document.getElementById('week-ending-display-container').classList.add('estimates-week-ending')

        // Add any cols that have been erased by the display settings
        await addMissingCols(columns)

        // Create sortable departments bar
        let departmentsBar=Sortable.create(document.getElementById('departments-bar'), {
            onEnd: reorderDepartments
        });

        // If manday rates are not set, open the manday rate modal to set them
        if (_sortedVersionKeys[0]) {
            if (!Object.keys(_mandayRates)[0]) {
                toggleManDayRatesModal(true)
            }
        }

        // If this is first estimate, prompt for first version name
        else { toggleEnterVersionModal(true, true) }
    }

    // Creates grid columns 
    function initializeColumns() {
        let columns=[
            // Core feature columns
            { id: "#", name: "#", field: "#", width: 30, editor: Slick.Editors.Integer, sortable: true },
            { id: "Set Code", name: "Set Code", field: "Set Code", width: 80, editor: Slick.Editors.Text, sortable: true, cssClass: 'required-for-save identifier' },
            { id: "Episode", name: "Episode", field: "Episode", width: 80, editor: Slick.Editors.Text, sortable: true },
            { id: "Name", name: "Name", field: "Name", width: 200, editor: Slick.Editors.Text, sortable: true },
            { id: "*", name: "*", field: "*", width: 30, sortable: true, headerCssClass: 'star-column-header' },
        ];

        // Non-department estimate specific columns
        if (_sortedVersionKeys[0]) {
            for (key in _extraColumns) {
                // Select column editor based on extracolumns map
                let editor=Slick.Editors.Text
                if (_extraColumns[key]=='longtext') { editor=Slick.Editors.LongText }

                columns.push({ id: key, deletable: true, name: key, field: key, width: 150, editor, sortable: true, headerCssClass: 'deletable-header' });
            }
        }

        // Math columns
        columns=columns.concat([
            { id: "No Fringes", name: "No Fringes", field: "No Fringes", width: 80, sortable: true, groupTotalsFormatter: sumTotalsDollarsFormatter, cssClass: 'uneditable currency' },
            { id: "Current", name: "Current", field: "Current", width: 80, sortable: true, groupTotalsFormatter: sumTotalsDollarsFormatter, cssClass: 'uneditable currency' },
            { id: "Previous", name: "Previous", field: "Previous", width: 80, sortable: true, groupTotalsFormatter: sumTotalsDollarsFormatter, cssClass: 'uneditable currency' },
            { id: "Variance", name: "Variance", field: "Variance", width: 80, sortable: true, groupTotalsFormatter: sumTotalsDollarsFormatter, cssClass: 'uneditable currency' },
        ])

        // Department columns 
        for (d of _args.departments) { columns=columns.concat(addDepartment(d)) }

        // Apply access profile column filter to hide restricted columns if _version exists
        columns=hideRestrictedColumns(columns, 'Set Code')

        return columns;
    }

    // Returns array of grid options
    function initializeOptions() {
        return {
            editable: true,
            enableAddRow: true,
            enableCellNavigation: true,
            asyncEditorLoading: false,
            autoEdit: false,
            editCommandHandler: queueAndExecuteEdit,
        }
    }
</script>