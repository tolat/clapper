<script>
    // Global variables
    let _show= <%- JSON.stringify(show)%>;
    let _accessProfile= <%- JSON.stringify(accessProfile)%>;
    let _user= <%- JSON.stringify(user)%>;
    setWeekEnding()

    let _extraColumns=_week.positions.extraColumns;
    let _validators=[
        {
            fields: ['Rate'],
            isInvalid: function (args, field) {
                return isNaN(parseFloat(args.item['Rate']))
            },
            validationHeader: 'Invalid Rate!',
            validationMessage: "Rate must be a number."
        },
        {
            fields: ['Department'],
            isInvalid: function (args, field) {
                this.validationHeader=`Department '${args.item[field]}' Not Found!`
                this.validationMessage=`New departments can only be added in the 'Estimates' page.\nDepartments are case-sensitive!`
                if (args.item[field]==undefined) { args.item[field]="" }
                let depIdx=_show.departments.map(d => d.toLowerCase()).indexOf(args.item[field].toLowerCase());
                let dep=false;
                if (depIdx>=0) {
                    args.item[field]=_show.departments[depIdx];
                    dataView.updateItem(args.item.id, args.item);
                    dep=true;
                }
                return !dep;
            }
        },
        {
            fields: ['Code'],
            isInvalid: function (args, field) {
                return dataView.getItems().filter(item => item.id!=args.item.id).map(item => item['Code']).includes(args.item['Code'])
            },
            validationHeader: 'Invalid Position Code!',
            validationMessage: "Position codes must be unique."
        }
    ];
    let _totals={};
    let _multipliers=_week.multipliers
    let _dropdownNodes=initDropdownNodes()
    let _displaySettings=_accessProfile.displaySettings[_user.username.replaceAll(".", "_")][_week._id]||{}

    var grid;
    var dataView;

    // Load the grid 
    async function onLoad() {
        var positions=_week.positions.positionList;

        // Create options
        var options=await initializeOptions();

        // Create grid data
        let data=<%- JSON.stringify(data)%>;

        // Create grid columns
        var columns=await initializeColumns(positions, _show, _args);

        // Create data grid
        await createSlickGrid(data, columns, options, _show, _args);

        grid.recalculate=function (item) {
            // Do Nothing
        }

        // Update grid on cell change
        grid.onCellChange.subscribe(function (e, args) {
            // Run validators on cell edit 
            runValidators(_validators, args);
        })

        // Hide totals display
        document.getElementById('grid-footer-totals-container').style.display='none';

        // Apply display settings to grid
        applyDisplaySettings(_displaySettings)

        // Calcualte totals for totals footer row
        updateTotalsRow();
    }

    // Creates grid columns 
    function initializeColumns(positions, _show, _args) {
        let columns=[
            { id: "Name", name: "Name", field: "Name", width: 200, editor: Slick.Editors.Text, sortable: true, cssClass: 'required-for-save' },
            { id: "Code", name: "Code", field: "Code", editor: Slick.Editors.Text, sortable: true, cssClass: 'required-for-save' },
            { id: "Department", name: "Department", field: "Department", width: 200, editor: AutoCompleteEditor, dataSource: _show.departments, sortable: true, cssClass: 'required-for-save' },
            { id: "Rate", name: "Rate", field: "Rate", editor: Slick.Editors.Text, sortable: true, cssClass: 'required-for-save rate' },
        ];

        // Add extra columns
        for (key of _extraColumns) {
            let column={ id: key, deletable: true, name: key, field: key, width: 150, editor: Slick.Editors.Text, sortable: true };
            columns.push(column);
        }

        // Apply access profile column filter to hide restricted columns
        for (col of columns) {
            if (_accessProfile.columnFilter.includes(col.name)) {
                if (!_displaySettings.setHiddenColumns) { _displaySettings.setHiddenColumns=[] }
                // Hide column
                _displaySettings.setHiddenColumns.push(col.name)
                // Lock coumn as hidden
                col.lockHidden=true
                // Remove required for save class from column
                if (col.cssClass) {
                    col.cssClass=col.cssClass.replaceAll("required-for-save", "")
                }
            }
        }
        return columns;
    }

    // Returns array of grid options
    function initializeOptions() {
        return {
            editable: true,
            enableAddRow: true,
            enableCellNavigation: true,
            enableColumnReorder: true,
            asyncEditorLoading: false,
            autoEdit: false,
            editCommandHandler: queueAndExecuteEdit,
        }
    }

</script>