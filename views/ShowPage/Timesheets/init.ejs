<script>
    // Global variables
    var _args= <%- JSON.stringify(args)%>;
    let _sortedVersionKeys= <%- JSON.stringify(sortedVersionKeys)%>;

    setWeekEnding()
    populateAccessProfileModal(false, false, true)

    var _validators=[];
    var _totals={};
    var _currentMap=_args.currentMap
    var _currentMapObject=_args.currentMapObject
    const _currentWeekDays=getDaysOfCurrentWeek()

    // Create list of unique hour multipliers
    let _uniqueMuls=[]
    for (mul in _args.multipliers) {
        for (day of _currentWeekDays) {
            let dayAbbrv=day.toString().slice(0, 3)
            let mulVal=_args.multipliers[mul][dayAbbrv]
            if (!_uniqueMuls.includes(mulVal)) {
                _uniqueMuls.push(mulVal)
            }
        }
    }

    // Initlialize variable picker variables
    let _variables=initializeVariables()

    var grid;
    var dataView;

    // Load the grid 
    async function onLoad() {
        // Add variable picker component to page
        await addVariablePicker()

        // Set the week ending if the show has a current week ending
        await setWeekEnding();

        // Create options
        var options=await initializeOptions();

        // Create grid data
        var data=await initializeData();

        // Create grid columns
        var columns=await initializeColumns();

        // Create data grid
        await createSlickGrid(data, columns, options);

        // Apply display settings
        if (_currentMapObject&&_currentMapObject.displaySettings) { applyDisplaySettings(_currentMapObject.displaySettings) }

        // Update Totals Row (use just to show week ending here)
        await updateTotalsRow()

        // Does nothing, here to placate my angry console
        grid.recalculate=function () { }

        console.log(_currentMap)
        if (!_currentMap) {
            document.getElementById("copy-current-checkbox-container").style.display='none'
            document.getElementById("new-timesheet-map-modal-cancel").style.display='none'
            toggleNewTimesheetMapModal(true, true, false, 'Enter name for first timesheet map:')
        } else {
            // Load timesheet map values into grid
            await initializeMap()
            await populateOpenMapsModal()
        }
    }

    // Creates grid data 
    function initializeData() {
        let data=[];

        for (let i=1; i<=100; i++) {
            data.push({ id: `${i}`, '#': i });
        }

        return data;
    }

    // Creates grid columns 
    function initializeColumns() {
        let columns=[{ id: "#", name: " ", field: "#", width: 30, minWidth: 10, cssClass: 'spreadsheet-header', headerCssClass: 'spreadsheet-header' }];
        let alphabet='a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.aa.ab.ac.ad.ae.af.ag.ah.ai.aj.ak.al.am.an.ao.ap.aq.ar.as.at.au.av.aw.ax.ay.az.ba.bb.bc.bd.be.bf.bg.bh.bi.bj.bk.bl.bm.bn.bo.bp.bq.br.bs.bt.bu.bv.bw.bx.by.bz'.split('.')
        for (letter of alphabet) {
            l=letter.toUpperCase();
            columns.push({ id: `${l}`, name: `${l}`, field: `${l}`, width: 30, editor: AutoCompleteEditor, dataSource: _variables.map(v => v.name), minWidth: 50, headerCssClass: 'spreadsheet-header' });
        }

        return columns;
    }

    // Returns array of grid options
    function initializeOptions() {
        return {
            editable: true,
            enableAddRow: true,
            enableCellNavigation: true,
            enableColumnReorder: false,
            asyncEditorLoading: false,
            autoEdit: false,
            editCommandHandler: queueAndExecuteEdit,
            frozenColumn: 0
        }
    }

</script>