<script>
    // Global variables
    let _accessProfile= <%- JSON.stringify(accessProfile)%>;
    let _user= <%- JSON.stringify(user)%>;
    let _apName= <%- JSON.stringify(apName)%>;
    let _currentWeekSetCodes= <%- JSON.stringify(currentWeekSetCodes)%>;
    let _userPosForWeekMap= <%- JSON.stringify(userPosForWeekMap)%>;
    let _userNamesForWeekMap= <%- JSON.stringify(userNamesForWeekMap)%>;
    let _posDeptMap= <%- JSON.stringify(posDeptMap)%>;
    let _sortedVersionKeys= <%- JSON.stringify(sortedVersionKeys)%>;

    setWeekEnding()
    populateAccessProfileModal(false, false, true)

    var _extraColumns=_args.extraColumns;
    var _taxColumns=_args.taxColumns
    var _validators=[
        {
            fields: ['Rental Name'],
            isInvalid: function (args, field) {
                this.validationHeader=`${field} Invalid!`;
                this.validationMessage=`${field} already exists.`;
                if (!args.item[field]) {
                    return false
                } else {
                    return dataView.getItems().find(i => i[field]==args.item[field]&&!i.id==args.item.id);
                }
            }
        },
        {
            fields: ['Day Rate', 'Days Rented'],
            isInvalid: function (args, field) {
                this.validationHeader=`${field} Invalid!`;
                this.validationMessage=`${field} must be a number.`;
                return isNaN(parseFloat(args.item[field]))&&args.item[field];
            }
        },
        {
            fields: ['Supplier'],
            isInvalid: function (args, field) {
                this.validationHeader=`Cannot find supplier '${args.item[field]}'!`;
                this.validationMessage=`Suppliers are crew members.\nCrew members can only be added in the 'Crew' page.`;
                let user=false;
                if (args.item['Supplier']&&args.item['Supplier'].includes('[')&&args.item['Supplier'].includes(']')) {
                    user=_userNamesForWeekMap[args.item['Supplier'].slice(args.item['Supplier'].indexOf('[')+1, args.item['Supplier'].indexOf(']'))]
                } else {
                    user=_userNamesForWeekMap[args.item['Supplier']]
                }
                return !user&&item['Supplier']
            }
        },
        {
            fields: ['Set Code'],
            isInvalid: function (args, field) {
                this.validationHeader=`Set '${args.item[field]}' Not Found!`
                this.validationMessage=`New sets can only be added in the 'Estimates' page.`
                return !_currentWeekSetCodes.find(s => s==args.item['Set Code'])&&args.item[field]
            }
        },
        {
            fields: ['Supplier Code'],
            isInvalid: function (args, field) {
                this.validationHeader=`Position '${args.item[field]}' Not Found!`
                this.validationMessage=`New positions can only be added in the 'Rates' page.\nPosition codes are case-sensitive!`
                return args.item[field]&&!Object.keys(_posDeptMap).includes(args.item[field])
            }
        },
        {
            fields: ['Department'],
            isInvalid: function (args, field) {
                this.validationHeader=`Department '${args.item[field]}' Not Found!`
                this.validationMessage=`New departments can only be added in the 'Estimates' page.\nDepartments are case-sensitive!`
                if (!args.item[field]||args.item[field]=="") { return false }
                let depIdx=_args.departments.map(d => d.toLowerCase()).indexOf(args.item[field].toLowerCase());
                let dep=false;
                if (depIdx>=0) {
                    args.item[field]=_args.departments[depIdx];
                    dataView.updateItem(args.item.id, args.item);
                    dep=true;
                }
                return !dep;
            }
        },
    ];
    var _totals={ 'Week Total': 'sum' };
    var _allShowCrew=_args.allShowCrew
    var _allUsers=_args.allUsers
    let _displaySettings=_accessProfile.displaySettings[_apName][_args.weekid]||{}
    var _allWeekCrewNames=Object.keys(_userNamesForWeekMap).map(uname => `${_userNamesForWeekMap[uname]} [${uname}]`)

    var grid;
    var dataView;

    // Load the grid 
    async function onLoad() {
        // Create options
        var options=await initializeOptions();

        // Create grid columns
        var columns=await initializeColumns();

        // Create grid data
        let data=<%- JSON.stringify(data)%>;
        data=await applyEditDataFilter(data, columns)

        // Create data grid
        await createSlickGrid(data, columns, options);

        // Update grid on cell change
        grid.onCellChange.subscribe(function (e, args) {
            // Run validators on cell edit 
            runValidators(_validators, args);

            // Auto fill rental data when cell changed
            autoFillSupplierData(args);

            // Calculate the weekly total when cell changed
            calculateWeeklyTotal(args);

            // Calcualte totals for totals footer row
            updateTotalsRow();

            grid.gotoCell(grid.getActiveCell().row, grid.getActiveCell().cell, false);
        })

        // Update supplier options when the active cell is changed
        grid.onActiveCellChanged.subscribe(function (e, args) {
            setSupplierOptions(args);
        })

        grid.recalculate=function (item) {
            calculateWeeklyTotal({ item: item })
            updateTotalsRow()
        }

        // Apply display settings to grid
        applyDisplaySettings(_displaySettings)

        // Calculate all rental weekly totals
        await calculateAllWeeklyTotals();

        // Calcualte totals for totals footer row
        await updateTotalsRow();
    }

    // Creates grid columns 
    function initializeColumns(positions) {
        let columns=[
            { id: "Rental Type", name: "Rental Type", field: "Rental Type", width: 200, editor: Slick.Editors.Text, sortable: true },
            { id: "Day Rate", name: "Day Rate", field: "Day Rate", width: 80, editor: Slick.Editors.Text, sortable: true, cssClass: 'required-for-save currency' },
            { id: "Set Code", name: "Set Code", field: "Set Code", width: 80, editor: AutoCompleteEditor, dataSource: _currentWeekSetCodes, sortable: true, cssClass: 'required-for-save' },
            { id: "Department", name: "Department", field: "Department", width: 90, sortable: true, editor: AutoCompleteEditor, dataSource: _args.departments, cssClass: 'required-for-save' },
            { id: "Days Rented", name: "Days Rented", field: "Days Rented", width: 90, editor: Slick.Editors.Text, sortable: true },
            { id: "Supplier", name: "Supplier", field: "Supplier", width: 150, sortable: true, editor: AutoCompleteEditor, dataSource: _allWeekCrewNames },
            { id: "Supplier Code", name: "Supplier Code", field: "Supplier Code", width: 80, editor: AutoCompleteEditor, dataSource: Object.keys(_posDeptMap), sortable: true },
        ];

        // Add extra columns (user-defined)
        for (key of _extraColumns) {
            columns.push({ id: key, deletable: true, name: key, field: key, width: 150, editor: Slick.Editors.Text, sortable: true })
        }

        // Add tax columns
        for (taxCol of _taxColumns) {
            columns.push({
                id: taxCol, name: taxCol, field: taxCol, width: 80,
                sortable: true, editor: Slick.Editors.Text, cssClass: 'tax-column'
            })
        }

        columns.push({ id: "Week Total", name: "Week Total", field: "Week Total", width: 80, sortable: true, cssClass: 'uneditable currency' })

        // Apply access profile column filter to hide restricted columns if _version exists
        columns=hideRestrictedColumns(columns, 'Rental Name')

        return columns;
    }

    // Returns array of grid options
    function initializeOptions() {
        return {
            editable: true,
            enableAddRow: true,
            enableCellNavigation: true,
            enableColumnReorder: true,
            asyncEditorLoading: false,
            autoEdit: false,
            editCommandHandler: queueAndExecuteEdit,
        }
    }

</script>