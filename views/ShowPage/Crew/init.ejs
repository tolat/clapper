<script>
    // Global variables
    let _show= <%- JSON.stringify(show)%>;
    let _accessProfile= <%- JSON.stringify(accessProfile)%>;
    let _user= <%- JSON.stringify(user)%>;
    let _apName= <%- JSON.stringify(apName)%>;
    let _currentVersionSetCodes= <%- JSON.stringify(currentVersionSetCodes)%>;
    let _dropdownNames= <%- JSON.stringify(dropdownNames)%>;
    let _allUsernames= <%- JSON.stringify(allUsernames)%>;
    setWeekEnding()

    let _removeEditedField
    let _multipliers=_week.multipliers
    let _extraColumns=_week.crew.extraColumns
    let _currentWeekDays=getDaysOfCurrentWeek()
    let _validators=[
        {
            fields: _currentWeekDays.map(day => day.toString().slice(0, 3)),
            isInvalid: function (args, field) {
                this.validationHeader='Invalid Hours!'
                this.validationMessage="Hours must be a number between 0 and 24"
                _removeEditedField=args.item[field]&&(isNaN(args.item[field])||args.item[field]>24)
                return _removeEditedField||(_savingUnderway&&args.item[field]&&!args.item[field+'_set'])
            },
        },
        {
            fields: _currentWeekDays.map(day => day.toString().slice(0, 3)+'_set'),
            isInvalid: function (args, field) {
                this.validationHeader=`Set '${args.item[field]}' Not Found!`
                this.validationMessage=`New sets can only be added in the 'Estimates' page.`
                return (args.item[field]&&!_currentVersionSetCodes.find(code => code==args.item[field].toString()))||
                    (_savingUnderway&&args.item[field]&&!args.item[field.replace('_set', '')])
            },
        },
        {
            fields: ['Position'],
            isInvalid: function (args, field) {
                this.validationHeader=`Position '${args.item[field]}' Not Found!`
                this.validationMessage='New positions can only be added in the Rates page'
                return !_positions[args.item[field]]&&args.item['Position']
            }
        },
        {
            fields: ['username'],
            isInvalid: function (args, field) {
                this.validationHeader=`There is already an entry for user: ${args.item['username']} with position: ${args.item['Position']}`
                this.validationMessage=''
                let items=dataView.getItems()
                return items.find(i => i['username']==args.item['username']&&i['Position']==args.item['Position']
                    &&i.id!=args.item.id&&item[field]!=undefined)
            }
        },
    ]
    let _totals={ Total: 'sum', Rentals: 'sum' }
    let _positions=_week.positions.positionList
    let _taxColumns=_week.crew.taxColumns
    let _displaySettings=_accessProfile.displaySettings[_apName][_week._id]||{}

    let grid
    let dataView

    // Load the grid 
    async function onLoad() {
        let crew=_week.crew.crewList

        // Create options
        let options=await initializeOptions()

        // Create grid data
        let data=<%- JSON.stringify(data)%>;

        // Create grid columns
        let columns=await initializeColumns(crew, _show, _args)

        // Create data grid
        await createSlickGrid(data, columns, options, _show, _args)

        // Add a listener to prevent day and set columns from being interrupted by other columns
        grid.onColumnsReordered.subscribe(function (e, args) {
            let currentCols=grid.getColumns().map(col => col.name)
            let weekDays=_currentWeekDays.map(day => day.toString().slice(0, 10))
            let weekColNames=currentCols.slice(currentCols.indexOf('Set')-1, currentCols.lastIndexOf('Set')+1)
            weekDays.push('Set')
            for (let i=0; i<weekColNames.length-1; i++) {
                if (!weekDays.includes(weekColNames[i])
                    ||((i%2!=0)&&weekColNames[i]!='Set')
                    ||((i==weekColNames.length-2)&&weekColNames[i]=='Set')) {
                    grid.setColumns(_prevColumns);
                    return
                }

            }

            setFrozenColumns(_frozenColumns);
            createReorderColumnCommand()
            _prevColumns=grid.getColumns()
        });

        // Recalculate function to recalculate item
        grid.recalculate=function (item, editedfields) {
            if (editedfields&&editedfields.includes('username')) {
                autoFillUserData({ item: item, cell: grid.getColumns().indexOf(grid.getColumns().find(c => c.field=='username')) })
            }

            item['Total']=calculateWeeklyTotal(item)
            dataView.updateItem(item.id, item)
            updateTotalsRow()


        }

        // Crew page cell change handler
        grid.onCellChange.subscribe(async function (e, args) {
            // Auto fill user data when user is added, and trim useid from name if necessary (user added from autofill menu)
            await autoFillUserData(args);

            // Record which cells have been edited for updating daysworked hours
            await updateEditedFields(args);

            // Run validators (again) on cell edit so changes made with this grid.onCellChange are validated
            await runValidators(_validators, args);

            // Recalculate total for item
            await recalculateWeeklyTotal(args);

            // Calculate totals for totals footer row
            await updateTotalsRow();

            grid.invalidate();
            grid.setData(dataView);
            grid.render();

            grid.gotoCell(grid.getActiveCell().row, grid.getActiveCell().cell, false);
        })

        // Apply display settings to grid
        applyDisplaySettings(_displaySettings)

        // Calculate totals for totals footer row
        updateTotalsRow()

        // Make sure weekday and set columns are all grouped together
        setCrewPageColumnOrder()
    }

    // Creates grid columns 
    function initializeColumns(crew, _show, _args) {
        let columns=[
            { id: "__spacer", width: 0, sortable: false },
            { id: "username", name: "Username", field: "username", width: 120, editor: AutoCompleteEditor, dataSource: _allUsernames, sortable: true, minWidth: 0, cssClass: 'required-for-save identifier' },
            { id: "Position", name: "Position", field: "Position", width: 50, editor: AutoCompleteEditor, dataSource: Object.keys(_positions), sortable: true, minWidth: 0, cssClass: 'required-for-save' },
            { id: "Name", name: "Name", field: "Name", width: 120, editor: AutoCompleteEditor, dataSource: _dropdownNames, sortable: true, minWidth: 0, },
            { id: "Department", name: "Department", field: "Department", width: 120, sortable: true, minWidth: 0, cssClass: 'uneditable' },
            { id: "Date Joined", name: "Date Joined", field: "Date Joined", width: 120, editor: Slick.Editors.Date, sortable: true, minWidth: 0 },
        ];

        // Add extra columns (user-defined)
        for (key of _extraColumns) {
            columns.push({ id: key, deletable: true, name: key, field: key, width: 150, editor: Slick.Editors.Text, sortable: true })
        }

        // Add hours and set columns
        for (day of _currentWeekDays) {
            let dayString=day.toString().slice(0, 10);
            let dayStringId=dayString.toString().slice(0, 3);
            columns.push(
                { id: dayStringId, name: dayString, field: dayStringId, width: 80, editor: Slick.Editors.Text, sortable: true, cssClass: 'hours-column', groupTotalsFormatter: countTotalsFormatter },
                { id: `${dayStringId}_set`, name: `Set`, field: `${dayStringId}_set`, width: 60, editor: AutoCompleteEditor, dataSource: _currentVersionSetCodes, sortable: true, cssClass: 'set-column' },
            );
        }

        // Add tax columns
        for (tax of _taxColumns) {
            columns.push({ id: tax, name: tax, field: tax, width: 60, sortable: true, editor: Slick.Editors.Text, cssClass: 'tax-column', deletable: true, istaxcolumn: true })
        }

        // Add rentals and total columns
        columns.push(...[
            { id: `Rentals`, name: `Rentals`, field: 'Rentals', width: 80, sortable: true, groupTotalsFormatter: sumTotalsDollarsFormatter, cssClass: 'uneditable currency' },
            { id: `Total`, name: `Total`, field: 'Total', width: 80, sortable: true, groupTotalsFormatter: sumTotalsDollarsFormatter, cssClass: 'uneditable currency' }
        ])


        // Apply access profile column filter to hide restricted columns
        for (col of columns) {
            if (_accessProfile.columnFilter.includes(col.name)) {
                if (!_displaySettings.setHiddenColumns) { _displaySettings.setHiddenColumns=[] }
                // Hide column
                _displaySettings.setHiddenColumns.push(col.name)
                // Lock coumn as hidden
                col.lockHidden=true
                // Remove required for save class from column
                if (col.cssClass) {
                    col.cssClass=col.cssClass.replaceAll("required-for-save", "")
                }
            }
        }


        return columns;
    }

    // Returns array of grid options
    function initializeOptions() {
        return {
            editable: true,
            enableAddRow: true,
            enableCellNavigation: true,
            enableColumnReorder: true,
            asyncEditorLoading: false,
            autoEdit: false,
            editCommandHandler: queueAndExecuteEdit,
        }
    }

</script>