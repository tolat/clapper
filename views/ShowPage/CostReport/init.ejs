<script>
    // Global variables
    let _accessProfile= <%- JSON.stringify(accessProfile)%>;
    let _user= <%- JSON.stringify(user)%>;
    let _apName= <%- JSON.stringify(apName)%>;
    let _estimateVersion= <%- JSON.stringify(estimateVersion)%>;
    let _sortedVersionKeys= <%- JSON.stringify(sortedVersionKeys)%>;

    setWeekEnding()
    populateAccessProfileModal(false, false, true)

    var _extraColumns=_args.extraColumns;
    var _validators=[];
    var _totals={ Budget: 'sum', 'To Date': 'sum', Remaining: 'sum' };
    let _displaySettings=_accessProfile.displaySettings[_apName][_estimateVersion][_args.weekid]||{}

    // Set correct version, defaulting to latest version if the cost report's version has been deleted or renamed
    var _version=_args.version
    document.getElementById('cost-report-estimate-version-display').innerText=`\xa0${_version.replace('_', '.')}`;

    // indicate if currently working with latest estimate version
    if (_version==_args.latestVersion) {
        document.getElementById('cost-report-estimate-version-display').innerHTML+=`
        <div style="color: grey; margin-left: 5px">(latest)</div`;
    }

    var grid;
    var dataView;

    // Load the grid 
    async function onLoad() {
        // Create options
        var options=await initializeOptions();

        // Create grid columns
        var columns=await initializeColumns();

        // Create grid data
        let data=<%- JSON.stringify(data)%>;
        data=await applyEditDataFilter(data, columns)

        // Create data grid
        await createSlickGrid(data, columns, options);

        // Placeholder function
        grid.recalculate=function () { }

        // Update grid on cell change
        grid.onCellChange.subscribe(function (e, args) {
            // Run validators on cell edit 
            runValidators(_validators, args);

            // Calcualte totals for totals footer row
            updateTotalsRow();
        })

        // Apply display settings to grid
        applyDisplaySettings(_displaySettings)

        // Calcualte totals for totals footer row
        await updateTotalsRow();

        // Reorder departments
        await reorderDepartments();
        undoRedoBuffer.commandQueue.pop()
        undoRedoBuffer.commandCtr--
        updateSaveStatus(true)

        // Initial save to update cost report totals
        saveData()
    }

    // Creates grid columns 
    function initializeColumns() {
        let columns=[
            // Core feature columns
            { id: "#", name: "#", field: "#", width: 30, editor: Slick.Editors.Integer, sortable: true },
            { id: "Set Code", name: "Set Code", field: "Set Code", width: 80, sortable: true, cssClass: 'uneditable cost-report-column' },
            { id: "Episode", name: "Episode", field: "Episode", width: 80, sortable: true, cssClass: 'uneditable cost-report-column' },
            { id: "Name", name: "Name", field: "Name", width: 300, sortable: true, cssClass: 'uneditable cost-report-column' },
            { id: "Budget", name: "Budget", field: "Budget", width: 80, groupTotalsFormatter: sumTotalsDollarsFormatter, sortable: true, cssClass: 'uneditable currency cost-report-column' },
            { id: "This Week", name: "This Week", field: "This Week", width: 80, groupTotalsFormatter: sumTotalsDollarsFormatter, sortable: true, cssClass: 'uneditable currency cost-report-column' },
            { id: "To Date", name: "To Date", field: "To Date", width: 80, groupTotalsFormatter: sumTotalsDollarsFormatter, sortable: true, cssClass: 'uneditable currency cost-report-column' },
            { id: "Remaining", name: "Remaining", field: "Remaining", width: 80, groupTotalsFormatter: sumTotalsDollarsFormatter, sortable: true, cssClass: 'uneditable currency cost-report-column' },
            { id: "% Remaining", name: "% Remaining", field: "% Remaining", width: 80, groupTotalsFormatter: avgPercentFormatter, sortable: true, cssClass: 'uneditable percent-remaining cost-report-column' },
            { id: "Labor", name: "Labor", field: "Labor", width: 80, groupTotalsFormatter: sumTotalsDollarsFormatter, sortable: true, cssClass: 'uneditable currency cost-report-column' },
            { id: "Man Days", name: "Man Days", field: "Man Days", width: 80, groupTotalsFormatter: sumTotalsFormatter, sortable: true, cssClass: 'uneditable mandays cost-report-column' },
            { id: "Materials", name: "Materials", field: "Materials", width: 80, groupTotalsFormatter: sumTotalsDollarsFormatter, sortable: true, cssClass: 'uneditable currency cost-report-column' },
            { id: "Rentals", name: "Rentals", field: "Rentals", width: 80, groupTotalsFormatter: sumTotalsDollarsFormatter, sortable: true, cssClass: 'uneditable currency cost-report-column' },
        ];

        // Add extra columns (user-defined)
        for (key in _extraColumns) {
            // Select column editor based on extracolumns map
            let editor=Slick.Editors.Text
            if (_extraColumns[key]=='longtext') { editor=Slick.Editors.LongText }

            columns.push({ id: key, deletable: true, name: key, field: key, width: 150, editor, sortable: true, headerCssClass: 'deletable-header' });
        }

        // Colorized Department columns 
        for (d of _args.departments) {
            columns=columns.concat([
                {
                    id: `${d}_budget`, name: 'Budget', field: `${d}_budget`, width: 80, minWidth: 50,
                    sortable: true, headerCssClass: `${d.replaceAll(" ", "")}_cssClass`, groupTotalsFormatter: sumTotalsDollarsFormatter, cssClass: 'uneditable currency cost-report-column'
                },
                {
                    id: `${d}_todate`, name: 'To Date', field: `${d}_todate`, width: 80, minWidth: 50,
                    sortable: true, headerCssClass: `${d.replaceAll(" ", "")}_cssClass`, groupTotalsFormatter: sumTotalsDollarsFormatter, cssClass: 'uneditable currency cost-report-column'
                },
                {
                    id: `${d}_week`, name: 'This Week', field: `${d}_week`, width: 80, minWidth: 50,
                    sortable: true, headerCssClass: `${d.replaceAll(" ", "")}_cssClass`, groupTotalsFormatter: sumTotalsDollarsFormatter, cssClass: 'uneditable currency cost-report-column'
                },
                {
                    id: `${d}_pctremaining`, name: '% Remaining', field: `${d}_pctremaining`, width: 80, minWidth: 50,
                    sortable: true, headerCssClass: `${d.replaceAll(" ", "")}_cssClass`, groupTotalsFormatter: avgPercentFormatter, cssClass: 'uneditable percent-remaining cost-report-column'
                },
                {
                    id: `${d}_labor`, name: 'Labor', field: `${d}_labor`, width: 80, minWidth: 50,
                    sortable: true, headerCssClass: `${d.replaceAll(" ", "")}_cssClass`, groupTotalsFormatter: sumTotalsDollarsFormatter, cssClass: 'uneditable currency cost-report-column'
                },
                {
                    id: `${d}_mandays`, name: 'Man Days', field: `${d}_mandays`, width: 80, minWidth: 50,
                    sortable: true, headerCssClass: `${d.replaceAll(" ", "")}_cssClass`, groupTotalsFormatter: sumTotalsFormatter, cssClass: 'uneditable mandays cost-report-column'
                },
                {
                    id: `${d}_materials`, name: 'Materials', field: `${d}_materials`, width: 80, minWidth: 50,
                    sortable: true, headerCssClass: `${d.replaceAll(" ", "")}_cssClass`, groupTotalsFormatter: sumTotalsDollarsFormatter, cssClass: 'uneditable currency cost-report-column'
                },
                {
                    id: `${d}_rentals`, name: 'Rentals', field: `${d}_rentals`, width: 80, minWidth: 50,
                    sortable: true, headerCssClass: `${d.replaceAll(" ", "")}_cssClass`, groupTotalsFormatter: sumTotalsDollarsFormatter, cssClass: 'uneditable currency cost-report-column'
                },

            ])
            addDepartmentCssClass(d);
            addToDepartmentsBar(d, `${d.replaceAll(" ", "")}_cssClass`, `scrollToDeptCol('${d}')`);
        }

        // Add a buffer column
        columns.push({ id: '___ExtraColumn___', field: '___ExtraColumn___', deletable: true, name: '___ExtraColumn___', width: 1000, cssClass: 'extra-column cost-report-column', headerCssClass: 'extra-column' })

        // Apply access profile column filter to hide restricted columns if _version exists
        columns=hideRestrictedColumns(columns, 'id')

        return columns;
    }

    // Returns array of grid options
    function initializeOptions() {
        return {
            editable: true,
            enableAddRow: true,
            enableCellNavigation: true,
            enableColumnReorder: true,
            asyncEditorLoading: false,
            autoEdit: false,
            editCommandHandler: queueAndExecuteEdit,
        }
    }

</script>