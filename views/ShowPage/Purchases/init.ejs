<script>
    // Global variables
    let _accessProfile= <%- JSON.stringify(accessProfile)%>;
    let _user= <%- JSON.stringify(user)%>;
    let _allSetCodes= <%- JSON.stringify(allSetCodes)%>;
    let _apName= <%- JSON.stringify(apName)%>;

    setWeekEnding()
    populateAccessProfileModal(false, false, true)

    let _displaySettings=_accessProfile.displaySettings[_apName][_args.weekid]||{}
    let _extraColumns=_args.extraColumns;
    let _taxColumns=_args.taxColumns
    let _validators=[
        {
            fields: ['Set Code'],
            isInvalid: function (args, field) {
                this.validationHeader='Set Not Found!'
                this.validationMessage="New sets can be added in the 'Estimates' page."
                if (args.item[field]) {
                    return !_allSetCodes.includes(args.item[field])&&args.item[field]!='DELETED'
                } else {
                    return false
                }
            },
        },
        {
            fields: ['Department'],
            isInvalid: function (args, field) {
                this.validationHeader=`Department '${args.item[field]}' Not Found!`
                this.validationMessage=`New departments can only be added in the 'Estimates' page.`
                if (args.item[field]) {
                    let depIdx=_args.departments.map(d => d.toLowerCase()).indexOf(args.item[field].toString().toLowerCase());
                    let existsDep=false;
                    if (depIdx>=0) {
                        args.item[field]=_args.departments[depIdx];
                        dataView.updateItem(args.item.id, args.item);
                        existsDep=true;
                    }
                    return !existsDep;
                } else {
                    return false
                }

            }
        },
        {
            fields: ['Amount'],
            isInvalid: function (args, field) { return args.item[field]&&isNaN(parseFloat(args.item[field])) },
            validationHeader: 'Invalid Amount!',
            validationMessage: "Amount must only contain numbers and '.'"
        },
    ];
    let _totals={ Total: 'sum' };

    let grid;
    let dataView;

    // Load the grid 
    async function onLoad() {
        // Set the week ending if the show has a current week ending
        await setWeekEnding();

        // Create options
        var options=await initializeOptions();

        // Create grid columns
        var columns=await initializeColumns();

        // Create grid data
        let data=<%- JSON.stringify(data)%>;
        data=await applyEditDataFilter(data, columns)

        // Create data grid
        await createSlickGrid(data, columns, options);

        grid.recalculate=function (item) {
            item=updatePurchaseTotal(item);
            dataView.updateItem(item.id, item)
            updateTotalsRow()
        }

        // Update the purchase total when amount or tax is edited
        grid.onCellChange.subscribe(function (e, args) {
            let col=grid.getColumns()[args.cell].name;

            if (col=='Amount'||_taxColumns.includes(col)) {
                let item=updatePurchaseTotal(args.item);
                dataView.updateItem(item.id, item);
            }

            // Run validators on cell edit 
            runValidators(_validators, args);

            updateTotalsRow();
        })

        // Apply display settings
        applyDisplaySettings(_displaySettings)

        // Calcualte totals for totals footer row
        updateTotalsRow();
    }

    // Creates grid columns 
    function initializeColumns() {
        let columns=[
            { id: "PO Num", name: "PO Num", field: "PO Num", width: 100, editor: Slick.Editors.Text, sortable: true },
            { id: "Date", name: "Date", field: "Date", width: 100, editor: Slick.Editors.Date, sortable: true, cssClass: 'required-for-save' },
            { id: "Set Code", name: "Set Code", field: "Set Code", width: 75, editor: AutoCompleteEditor, dataSource: _allSetCodes, sortable: true, cssClass: 'required-for-save' },
            { id: "Department", name: "Department", field: "Department", width: 100, editor: AutoCompleteEditor, dataSource: _args.departments, sortable: true, cssClass: 'required-for-save' },
            { id: "Episode", name: "Episode", field: "Episode", width: 75, sortable: true, cssClass: 'uneditable' },
            { id: "Amount", name: "Amount", field: "Amount", width: 100, editor: Slick.Editors.Text, sortable: true, groupTotalsFormatter: sumTotalsDollarsFormatter, cssClass: 'currency' },
        ]

        for (taxCol of _taxColumns) {
            columns.push(
                { id: taxCol, name: taxCol, field: taxCol, width: 60, editor: Slick.Editors.Text, deletable: true, istaxcolumn: true, sortable: true, cssClass: 'tax-column' },
            )
        }

        columns.push(...[
            { id: `Total`, name: `Total`, field: 'Total', width: 80, sortable: true, groupTotalsFormatter: sumTotalsDollarsFormatter, cssClass: 'uneditable currency' },
            { id: "Week", name: "Week", field: "Week", width: 40, sortable: true, cssClass: 'uneditable' },
            { id: "Invoice Num", name: "Invoice Num", field: "Invoice Num", width: 100, editor: Slick.Editors.Text, sortable: true },
            { id: "Supplier", name: "Supplier", field: "Supplier", width: 100, editor: Slick.Editors.Text, sortable: true },
            { id: "Description", name: "Description", field: "Description", width: 300, editor: Slick.Editors.LongText, sortable: true },])


        for (key of _extraColumns) {
            columns.push({ id: key, deletable: true, name: key, field: key, width: 150, editor: Slick.Editors.Text, sortable: true })
        }

        // Apply access profile column filter to hide restricted columns if _version exists
        columns=hideRestrictedColumns(columns, 'PO Num')

        return columns;
    }

    // Returns array of grid options
    function initializeOptions() {
        return {
            editable: true,
            enableAddRow: true,
            enableCellNavigation: true,
            asyncEditorLoading: false,
            autoEdit: false,
            editCommandHandler: queueAndExecuteEdit,
        }
    }

</script>